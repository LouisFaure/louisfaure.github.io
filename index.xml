<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Louis Faure</title><link>https://louis.faure.dev/</link><atom:link href="https://louis.faure.dev/index.xml" rel="self" type="application/rss+xml"/><description>Louis Faure</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 29 Oct 2024 00:00:00 +0000</lastBuildDate><image><url>https://louis.faure.dev/img/icon-192.png</url><title>Louis Faure</title><link>https://louis.faure.dev/</link></image><item><title>Example Page 1</title><link>https://louis.faure.dev/courses/example/example1/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://louis.faure.dev/courses/example/example1/</guid><description>&lt;p>In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p>
&lt;h2 id="tip-1">Tip 1&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p>
&lt;h2 id="tip-2">Tip 2&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p></description></item><item><title>Example Page 2</title><link>https://louis.faure.dev/courses/example/example2/</link><pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate><guid>https://louis.faure.dev/courses/example/example2/</guid><description>&lt;p>Here are some more tips for getting started with Academic:&lt;/p>
&lt;h2 id="tip-3">Tip 3&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p>
&lt;h2 id="tip-4">Tip 4&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p></description></item><item><title>Talk on Interpretable VAE for modeling cell fate dynamics across tissue contexts</title><link>https://louis.faure.dev/talk/broad/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/broad/</guid><description/></item><item><title>Talk for scverse community meeting: scFates, a scalable Python suite for fast tree inference and advanced pseudotime downstream analysis</title><link>https://louis.faure.dev/talk/scverse/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/scverse/</guid><description/></item><item><title>Poster for GRS-GRC Single Cell Cancer Biology: Joint modeling of shared and disease-specific fate dynamics</title><link>https://louis.faure.dev/talk/grs-grc/</link><pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/grs-grc/</guid><description/></item><item><title>Scalable &amp; Sustainable Computational Biology: Vectorization, Indexing Tricks, and Numba/Cython</title><link>https://louis.faure.dev/post/efficient_code_python/</link><pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/post/efficient_code_python/</guid><description>&lt;p>&lt;a href="https://github.com/LouisFaure/Blog_notebooks/blob/main/efficient_code_python
/Efficient_code_python.ipynb">&lt;img alt="Jupyter Notebook" src="https://img.shields.io/badge/jupyter-%23FA0F00.svg?style=for-the-badge&amp;amp;logo=jupyter&amp;amp;logoColor=white" style="margin-left:0;margin-top:0;margin-bottom:0;border-radius:5px; box-shadow:0 4px 16px 0 rgba(0, 0, 0, 0.1);">&lt;/a>&lt;/p>
&lt;p>Speeding up code is sometimes an overlooked aspect in the field of computational biology. Numerous constraints (multiple projects, thesis writing, pressure to publish, etc.) often lead many to write simple implementations of a given function, at the expense of efficiency. This is problematic as such code is not scalable, which can limit further discoveries done by other researchers. In this article, I will look at all tasks performed by a specific Python function I have designed, showing first an example of slow code, and then a suggestion of a faster implementation. I hope this will provide some tips to you to perform a scalable, more efficient, and &lt;a href="https://www.green-algorithms.org">environmentally friendly&lt;/a> science!&lt;/p>
&lt;h2 id="the-task">The Task&lt;/h2>
&lt;p>During my research, I was assigned to implement a relatively simple function. We work with single-cell data that includes clonal barcodes. These barcodes allow us to group and identify cells that belong to the same lineage, as a barcode would be passed from the mother cell to all subsequent daughter cells. Clonal barcoding is a potent tool for studying early fate biasing and can be used as input for some tools to infer the fate of non-barcoded neighboring cells.&lt;/p>
&lt;p>The most basic fate bias estimation between two fates in barcoded cells consists of counting the occurrences of the fates in each clone. We then compare these occurrences to the ones of other fates to statistically assign a fate bias.&lt;/p>
&lt;p>More precisely, we will calculate the fate bias $f$ as follows:
&lt;/p>
$$
f = \frac{c_A}{c_A+{c_B}\times{\alpha}^{-1}}
$$
&lt;p>with $c_A$ and $c_B$ being the number of occurrences of our fates A and B in each clone, and $\alpha= \frac{\sum c_A}{\sum c_B}$ is the ratio of the sum of all observed clones for each fate.&lt;/p>
&lt;p>To test of significance of fate bias, we will perform a Fisher exact test, with a 2x2 contingency table:&lt;/p>
$$
\begin{align*}
\begin{array}{|c|c|}
\hline
c_A &amp; c_B \\
\hline
\sum c_A &amp; \sum c_B \\
\hline
\end{array}
\end{align*}
$$
&lt;p>While this task should not be compute-intensive, there are several good examples of slow and inefficient code that can be fixed. You will see that slowness is not only caused by slow calculation but also by data access!&lt;/p>
&lt;h3 id="the-system-used-for-benchmark">The system used for benchmark&lt;/h3>
&lt;p>The numbers showed here come from tests with my MacBook Pro M2P 32GB.&lt;/p>
&lt;p>I used python 3.10.13 and installed the following packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install cospar fast_fisher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loading-libraries-and-the-data">Loading libraries and the data&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> cospar &lt;span style="color:#66d9ef">as&lt;/span> cs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> warnings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> scanpy &lt;span style="color:#66d9ef">as&lt;/span> sc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sc&lt;span style="color:#f92672">.&lt;/span>set_figure_params()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warnings&lt;span style="color:#f92672">.&lt;/span>filterwarnings(&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="quick-overview-of-the-data">Quick overview of the data&lt;/h3>
&lt;p>The data we will use here is a 30k+ cells &lt;a href="https://www.science.org/doi/10.1126/science.aaw3381">dataset of mouse hematopoiesis&lt;/a>. The cells were clonally barcoded once and then were subsequently sampled at multiple time points.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>adata_orig &lt;span style="color:#f92672">=&lt;/span> cs&lt;span style="color:#f92672">.&lt;/span>datasets&lt;span style="color:#f92672">.&lt;/span>hematopoiesis()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will focus on the bifurcation between Monocytes and Neutrophils:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>mask &lt;span style="color:#f92672">=&lt;/span> adata_orig&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>state_info&lt;span style="color:#f92672">.&lt;/span>isin([&lt;span style="color:#e6db74">&amp;#34;Monocyte&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Neutrophil&amp;#34;&lt;/span>]) &lt;span style="color:#f92672">|&lt;/span> adata_orig&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>NeuMon_mask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adata &lt;span style="color:#f92672">=&lt;/span> adata_orig[mask]&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sc&lt;span style="color:#f92672">.&lt;/span>pl&lt;span style="color:#f92672">.&lt;/span>embedding(adata,color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;state_info&amp;#34;&lt;/span>,basis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;emb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img alt="png" src="https://louis.faure.dev/post/efficient_code_python/output_10_0.png">&lt;/p>
&lt;h3 id="some-parameters-needed">Some parameters needed&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>clone &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;X_clone&amp;#39;&lt;/span> &lt;span style="color:#75715e"># key to access the clonal matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fA &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Neutrophil&amp;#39;&lt;/span> &lt;span style="color:#75715e"># fate A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fB &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Monocyte&amp;#39;&lt;/span> &lt;span style="color:#75715e"># fate B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>state_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;state_info&amp;#39;&lt;/span> &lt;span style="color:#75715e"># key for fate assignments&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cutoff &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span> &lt;span style="color:#75715e"># cutoff for Fisher test corrected p-values&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getting-cell-indices-for-each-clone">Getting cell indices for each clone&lt;/h2>
&lt;p>We use a clone matrix saved in anndata under &lt;code>obsm&lt;/code> as a sparse matrix, where the rows are cells and columns are clones. We need to extract which cell belongs to which clone. In other words, the task is to retrieve the row indices of each column.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_cellid_per_clone&lt;/span>(adata,clone):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X_clone &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obsm[clone]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [np&lt;span style="color:#f92672">.&lt;/span>argwhere(X_clone[:,i])[:,&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(X_clone&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>])]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cid &lt;span style="color:#f92672">=&lt;/span> get_cellid_per_clone(adata,clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.756s
&lt;/code>&lt;/pre>
&lt;p>Why is this method slow? Though this approach is straightforward (practically one line), a &lt;code>for&lt;/code> loop that calls &lt;code>np.argwhere&lt;/code> for each of the columns implies that we are not leveraging NumPy&amp;rsquo;s ability to perform operations on entire arrays at once.&lt;/p>
&lt;p>Let&amp;rsquo;s have a look at a faster implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_cellid_per_clone_f&lt;/span>(adata,clone):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X_clone &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obsm[clone]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Extract and sort row and columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows, cols &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>nonzero(X_clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort_idx &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>argsort(cols)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows_sorted &lt;span style="color:#f92672">=&lt;/span> rows[sort_idx]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cols_sorted &lt;span style="color:#f92672">=&lt;/span> cols[sort_idx]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the count of unique columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _, counts &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>unique(cols_sorted, return_counts&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Split rows_sorted based on counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>split(rows_sorted, np&lt;span style="color:#f92672">.&lt;/span>cumsum(counts[:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cid &lt;span style="color:#f92672">=&lt;/span> get_cellid_per_clone_f(adata,clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.00539s
&lt;/code>&lt;/pre>
&lt;p>Why is this fast? Because we use NumPy&amp;rsquo;s vectorized function &lt;code>np.nonzero&lt;/code> to find the indices of non-zero elements in the entire array at once. Then, we sort these indices based on the column indices and split them into separate arrays for each column. By sorting the indices based on the column indices (&lt;code>np.argsort&lt;/code> is also vectorized), the function avoids having to access the columns individually.&lt;/p>
&lt;h2 id="getting-the-occurrence-of-our-two-fate-labels-in-each-clone">Getting the occurrence of our two fate labels in each clone&lt;/h2>
&lt;p>We want to count the occurrence of our two fate labels in each clone and the total of each fate. This involves retrieving the cluster assignment for each cell within each clone.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_counts_per_clone&lt;/span>(adata,cid,state_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Convert cell id to assigned cell state for each clone&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cl &lt;span style="color:#f92672">=&lt;/span> [adata[c]&lt;span style="color:#f92672">.&lt;/span>obs[state_key] &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> cid]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Count occurences of states per clone&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clA &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([(c&lt;span style="color:#f92672">==&lt;/span>fA)&lt;span style="color:#f92672">.&lt;/span>sum() &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> cl])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clB &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([(c&lt;span style="color:#f92672">==&lt;/span>fB)&lt;span style="color:#f92672">.&lt;/span>sum() &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> cl])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sum(clA) , np&lt;span style="color:#f92672">.&lt;/span>sum(clB)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> clA, clB, clAsum, clBsum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clA, clB, clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> get_counts_per_clone(adata,cid,state_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>1.71s
&lt;/code>&lt;/pre>
&lt;p>Why is this slow? Here the issue lies in the repeated access of the anndata object in a &lt;code>for&lt;/code> loop, which is quite inefficient. Also, although this does not have that much of an impact, the function calculates the sum of clA and clB separately.&lt;/p>
&lt;p>Here is a faster implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_counts_per_clone_f&lt;/span>(adata,cid,state_key):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get cell id and clone id array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>repeat(np&lt;span style="color:#f92672">.&lt;/span>arange(len(cid)), [len(c) &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> cid])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>concatenate(cid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid_cl &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>column_stack((c, i))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># apply cell/clone id array to states array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs[[state_key]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[&lt;span style="color:#e6db74">&amp;#34;clone&amp;#34;&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>nan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>iloc[cid_cl[:,&lt;span style="color:#ae81ff">0&lt;/span>],&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>cid_cl[:,&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Count occurences of states per clone&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnts &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>groupby(state_key)&lt;span style="color:#f92672">.&lt;/span>value_counts([&lt;span style="color:#e6db74">&amp;#34;clone&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clAB &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat([cnts[fA]&lt;span style="color:#f92672">.&lt;/span>sort_index(),cnts[fB]&lt;span style="color:#f92672">.&lt;/span>sort_index()],axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>values
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clA, clB &lt;span style="color:#f92672">=&lt;/span> clAB[:,&lt;span style="color:#ae81ff">0&lt;/span>], clAB[:,&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> clAB&lt;span style="color:#f92672">.&lt;/span>sum(axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> clA, clB, clAsum, clBsum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clA, clB, clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> get_counts_per_clone_f(adata,cid,state_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.0103s
&lt;/code>&lt;/pre>
&lt;p>Why is this fast? First, we used vectorized functions &lt;code>np.column_stack&lt;/code> and &lt;code>np.repeat&lt;/code> to create a NumPy array assigning each cell index to a clone id. Then, we use the &lt;code>groupby&lt;/code> method from pandas, which is optimized for grouping and aggregating data. Finally, the anndata is read and written only once, avoiding the usage of any &lt;code>for&lt;/code> loop.&lt;/p>
&lt;h2 id="calculating-fate-bias-and-its-significance-per-cell">Calculating fate bias and its significance per cell&lt;/h2>
&lt;p>We will use the equation mentioned in the introduction, as well as the Fisher exact test. More precisely, we will perform the test on each clone using extracted counts of our two fates and their total sum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_fate_bias&lt;/span>(clA,clB,clAsum, clBsum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Perform Fisher extact test on clone counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> scipy.stats &lt;span style="color:#f92672">import&lt;/span> fisher_exact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pvals &lt;span style="color:#f92672">=&lt;/span> [fisher_exact(np&lt;span style="color:#f92672">.&lt;/span>array([[cla,clb], [clAsum, clBsum]]))[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> cla,clb &lt;span style="color:#f92672">in&lt;/span> zip(clA,clB)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get fate biasing using clone counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slope &lt;span style="color:#f92672">=&lt;/span> clAsum&lt;span style="color:#f92672">/&lt;/span>clBsum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fate_bias &lt;span style="color:#f92672">=&lt;/span> clA&lt;span style="color:#f92672">/&lt;/span> (clA &lt;span style="color:#f92672">+&lt;/span> clB&lt;span style="color:#f92672">/&lt;/span>slope)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pvals, slope, fate_bias
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvals, slope, fate_bias &lt;span style="color:#f92672">=&lt;/span> get_fate_bias(clA,clB,clAsum, clBsum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>1.17s
&lt;/code>&lt;/pre>
&lt;p>Why is this slow? Because &lt;code>scipy&lt;/code> implementation of &lt;code>fisher_exact&lt;/code> is written in plain Python. As this is the actual calculation part of our code, there should be room for improvement by using a faster implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_fate_bias_f&lt;/span>(clA,clB,clAsum, clBsum):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Perform Fisher extact test on clone counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> fast_fisher &lt;span style="color:#f92672">import&lt;/span> fast_fisher_exact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pvals &lt;span style="color:#f92672">=&lt;/span> [fast_fisher_exact(cla,clb, clAsum, clBsum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> cla,clb &lt;span style="color:#f92672">in&lt;/span> zip(clA,clB)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get fate biasing using clone counts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slope &lt;span style="color:#f92672">=&lt;/span> clAsum&lt;span style="color:#f92672">/&lt;/span>clBsum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fate_bias &lt;span style="color:#f92672">=&lt;/span> clA&lt;span style="color:#f92672">/&lt;/span> (clA &lt;span style="color:#f92672">+&lt;/span> clB&lt;span style="color:#f92672">/&lt;/span>slope)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pvals, slope, fate_bias
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvals, slope, fate_bias &lt;span style="color:#f92672">=&lt;/span> get_fate_bias_f(clA,clB,clAsum, clBsum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.0154s
&lt;/code>&lt;/pre>
&lt;p>Why is this fast? With a simple Google search, I found the Python package &lt;a href="https://github.com/MrTomRod/fast-fisher">fast_fisher&lt;/a>, which provides Numba and Python implementations of the Fisher exact test. Numba compiles a function using the LLVM compiler library, while Cython converts Python functions to compiled C code, both lead to great speedups.&lt;/p>
&lt;h2 id="saving-the-data">Saving the data&lt;/h2>
&lt;p>One might think that saving data is a trivial task. Here is how to avoid inefficiencies!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">assign_results&lt;/span>(adata,cid,pvals,fate_bias,cutoff):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs[&lt;span style="color:#e6db74">&amp;#34;fisher_pval&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>nan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs[&lt;span style="color:#e6db74">&amp;#34;fate_bias&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ci,p,f &lt;span style="color:#f92672">in&lt;/span> zip(cid,pvals,fate_bias):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>loc[adata&lt;span style="color:#f92672">.&lt;/span>obs_names[ci],&lt;span style="color:#e6db74">&amp;#39;fisher_pval&amp;#39;&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> p &lt;span style="color:#f92672">&amp;lt;&lt;/span> cutoff:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>loc[adata&lt;span style="color:#f92672">.&lt;/span>obs_names[ci],&lt;span style="color:#e6db74">&amp;#39;fate_bias&amp;#39;&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assign_results(adata,cid,pvals,fate_bias,cutoff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.38s
&lt;/code>&lt;/pre>
&lt;p>Why is this slow? The function locates the index of the dataframe using &lt;code>adata.obs_names[ci]&lt;/code> and assigns the values. This operation is not very efficient as it involves looking up the index for each element. In addition, &lt;code>loc&lt;/code> is slow as the cell id needs to be converted into integer indexes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">assign_results_f&lt;/span>(adata,cid,pvals,fate_bias,cutoff):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs[&lt;span style="color:#e6db74">&amp;#34;fisher_pval&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>nan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs[&lt;span style="color:#e6db74">&amp;#34;fate_bias&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>concatenate(cid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># prepare assignment array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid_len &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([len(c) &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> cid])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid_pval_f &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>column_stack((
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c, np&lt;span style="color:#f92672">.&lt;/span>repeat(pvals, cid_len),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> np&lt;span style="color:#f92672">.&lt;/span>repeat(fate_bias, cid_len)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># assign values to anndata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> col &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>columns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>iloc[cid_pval_f[:,&lt;span style="color:#ae81ff">0&lt;/span>],col&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;fisher_pval&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> cid_pval_f[:,&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid_pval_f &lt;span style="color:#f92672">=&lt;/span> cid_pval_f[cid_pval_f[:,&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">&amp;lt;&lt;/span>cutoff,:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>iloc[cid_pval_f[:,&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>astype(int),col&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#34;fate_bias&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> cid_pval_f[:,&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assign_results_f(adata,cid,pvals,fate_bias,cutoff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>0.00429s
&lt;/code>&lt;/pre>
&lt;p>Why is this fast? We prepare the assignment array outside the loop, which reduces the computational overhead. This assignment array is created by vectorized functions &lt;code>np.repeat&lt;/code> and &lt;code>np.column_stack&lt;/code>. To perform the actual assignment, we use &lt;code>iloc&lt;/code> for indexing, which is faster than &lt;code>loc&lt;/code> because it accesses the data directly by integer index. Lastly, we use boolean indexing (&lt;code>cid_pval_f[:,1]&amp;lt;cutoff&lt;/code>) to filter the data, which is more efficient than using a loop.&lt;/p>
&lt;h2 id="overall-speed-comparison">Overall speed comparison&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">slow_implementation&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clone &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;X_clone&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fA &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Neutrophil&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fB &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Monocyte&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;state_info&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cutoff &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid &lt;span style="color:#f92672">=&lt;/span> get_cellid_per_clone(adata,clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clA, clB, clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> get_counts_per_clone(adata,cid,state_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pvals, slope, fate_bias &lt;span style="color:#f92672">=&lt;/span> get_fate_bias(clA,clB,clAsum, clBsum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assign_results(adata,cid,pvals,fate_bias,cutoff)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fast_implementation&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adata,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clone &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;X_clone&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fA &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Neutrophil&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fB &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Monocyte&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;state_info&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cutoff &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cid &lt;span style="color:#f92672">=&lt;/span> get_cellid_per_clone_f(adata,clone)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clA, clB, clAsum, clBsum &lt;span style="color:#f92672">=&lt;/span> get_counts_per_clone_f(adata,cid,state_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pvals, slope, fate_bias &lt;span style="color:#f92672">=&lt;/span> get_fate_bias_f(clA,clB,clAsum, clBsum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assign_results_f(adata,cid,pvals,fate_bias,cutoff)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>slow_implementation(adata)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>slow_t &lt;span style="color:#f92672">=&lt;/span> (end&lt;span style="color:#f92672">-&lt;/span>start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fate_bias_slow &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>fate_bias&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvals_slow &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>fisher_pval&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fast_implementation(adata)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fast_t&lt;span style="color:#f92672">=&lt;/span>(end&lt;span style="color:#f92672">-&lt;/span>start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fate_bias_fast &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>fate_bias&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pvals_fast &lt;span style="color:#f92672">=&lt;/span> adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>fisher_pval&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>(slow_t&lt;span style="color:#f92672">/&lt;/span>fast_t)&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.4&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">X speed improvement!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>243.6X speed improvement!
&lt;/code>&lt;/pre>
&lt;p>We achieved more than a 200X speed improvement! That is quite an accomplishment. It&amp;rsquo;s important to note that the slower code benefited from the fast SSD of my MacBook. I would anticipate it running much slower on a system/HPC with slower storage.&lt;/p>
&lt;h3 id="checking-consistency-between-two-approaches">Checking consistency between two approaches&lt;/h3>
&lt;p>It is always important to check that we end up with the same result between the two implementations!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>np&lt;span style="color:#f92672">.&lt;/span>array_equal(fate_bias_slow,fate_bias_fast)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>True
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Using allclose because of slight numerical differences &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># between python and C implementations&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>np&lt;span style="color:#f92672">.&lt;/span>allclose(pvals_fast,pvals_slow)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>True
&lt;/code>&lt;/pre>
&lt;h2 id="displaying-results">Displaying results&lt;/h2>
&lt;p>Let&amp;rsquo;s display our extracted fate biases&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sc&lt;span style="color:#f92672">.&lt;/span>pl&lt;span style="color:#f92672">.&lt;/span>embedding(adata[(adata&lt;span style="color:#f92672">.&lt;/span>obs&lt;span style="color:#f92672">.&lt;/span>fate_bias&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">.5&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>abs()&lt;span style="color:#f92672">.&lt;/span>sort_values()&lt;span style="color:#f92672">.&lt;/span>index],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;fate_bias&amp;#34;&lt;/span>,basis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;emb&amp;#34;&lt;/span>,sort_order&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>,cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bwr&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img alt="png" src="https://louis.faure.dev/post/efficient_code_python/output_51_0.png">&lt;/p>
&lt;h2 id="take-home-messages-for-efficient-code-writing-and-sharing">Take home messages for efficient code writing and sharing&lt;/h2>
&lt;ul>
&lt;li>Before attempting to parallelize every possible for loop, try to vectorize your code as much as possible. Numpy provides a wide range of fast functions for this purpose.&lt;/li>
&lt;li>Be mindful of data read/write and indexing, especially on slower HDD systems. Sometimes, pre-allocating data arrays and/or sorting indexes can be beneficial strategies.&lt;/li>
&lt;li>For actual computations occurring on large datasets, use Numba or Cython implementations whenever possible. Writing in Numba is particularly straightforward as its syntax is identical to Python&amp;rsquo;s.&lt;/li>
&lt;li>Don&amp;rsquo;t hesitate to explore the web or ask some LLMs. There&amp;rsquo;s a good chance someone has already implemented a particular subfunction you need!&lt;/li>
&lt;li>Identify the slow parts of your code by profiling the runtime line by line. A simple and effective tool for this task is &lt;a href="https://github.com/pyutils/line_profiler">line_profiler&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>However, there&amp;rsquo;s an important caveat:&lt;/p>
&lt;ul>
&lt;li>Don&amp;rsquo;t waste your time optimizing a code/function that isn&amp;rsquo;t expected to be used frequently by you or other people. It&amp;rsquo;s crucial to assess where our time is best invested!&lt;/li>
&lt;/ul></description></item><item><title>Polymorphic parasitic larvae cooperate to build swimming colonies luring hosts</title><link>https://louis.faure.dev/publication/krupenko_polymorphic_2023/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/krupenko_polymorphic_2023/</guid><description>&lt;p>Publisher: Elsevier&lt;/p></description></item><item><title>Directionality of developing skeletal muscles is set by mechanical forces</title><link>https://louis.faure.dev/publication/sunadome2023/</link><pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/sunadome2023/</guid><description/></item><item><title>scFates: a scalable python package for advanced pseudotime and bifurcation analysis from single cell data</title><link>https://louis.faure.dev/publication/faure2022c/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/faure2022c/</guid><description>&lt;p>btac746&lt;/p></description></item><item><title>Emergence of neuron types</title><link>https://louis.faure.dev/publication/faure2022b/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/faure2022b/</guid><description/></item><item><title>Developmental heterogeneity of embryonic neuroendocrine chromaffin cells and their maturation dynamics</title><link>https://louis.faure.dev/publication/akkuratova2022/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/akkuratova2022/</guid><description/></item><item><title>Schwann cell precursors represent a neural crest-like state with biased multipotency</title><link>https://louis.faure.dev/publication/kastriti2022/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/kastriti2022/</guid><description/></item><item><title>Poster for FENS: Schwann cell precursors represent a neural crest-like state with biased multipotency</title><link>https://louis.faure.dev/talk/fens/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/fens/</guid><description>&lt;script type="text/javascript" src= '/js/pdf-js/build/pdf.js'>&lt;/script>
&lt;style>
#the-canvas {
border: 1px solid black;
direction: ltr;
width: 100%;
height: auto;
display: none;
}
#paginator {
display: none;
text-align: center;
margin-bottom: 10px;
}
#loadingWrapper {
display: none;
justify-content: center;
align-items: center;
width: 100%;
height: 350px;
}
#loading {
display: inline-block;
width: 50px;
height: 50px;
border: 3px solid #d2d0d0;;
border-radius: 50%;
border-top-color: #383838;
animation: spin 1s ease-in-out infinite;
-webkit-animation: spin 1s ease-in-out infinite;
}
@keyframes spin {
to { -webkit-transform: rotate(360deg); }
}
@-webkit-keyframes spin {
to { -webkit-transform: rotate(360deg); }
}
&lt;/style>
&lt;div id="paginator">
&lt;button id="prev">Previous&lt;/button>
&lt;button id="next">Next&lt;/button>
&amp;nbsp; &amp;nbsp;
&lt;span>Page: &lt;span id="page_num">&lt;/span> / &lt;span id="page_count">&lt;/span>&lt;/span>
&lt;/div>
&lt;div id="embed-pdf-container">
&lt;div id="loadingWrapper">
&lt;div id="loading">&lt;/div>
&lt;/div>
&lt;canvas id="the-canvas">&lt;/canvas>
&lt;/div>
&lt;script type="text/javascript">
window.onload = function() {
var url = "https:\/\/louis.faure.dev\/" + '.\/talk\/fens\/FENS_poster.pdf';
var hidePaginator = "true" === "true";
var hideLoader = "" === "true";
var selectedPageNum = parseInt("") || 1;
var pdfjsLib = window['pdfjs-dist/build/pdf'];
pdfjsLib.GlobalWorkerOptions.workerSrc = "https:\/\/louis.faure.dev\/" + '/js/pdf-js/build/pdf.worker.js';
var pdfDoc = null,
pageNum = selectedPageNum,
pageRendering = false,
pageNumPending = null,
scale = 3,
canvas = document.getElementById('the-canvas'),
ctx = canvas.getContext('2d'),
paginator = document.getElementById("paginator"),
loadingWrapper = document.getElementById('loadingWrapper');
showPaginator();
showLoader();
function renderPage(num) {
pageRendering = true;
pdfDoc.getPage(num).then(function(page) {
var viewport = page.getViewport({scale: scale});
canvas.height = viewport.height;
canvas.width = viewport.width;
var renderContext = {
canvasContext: ctx,
viewport: viewport
};
var renderTask = page.render(renderContext);
renderTask.promise.then(function() {
pageRendering = false;
showContent();
if (pageNumPending !== null) {
renderPage(pageNumPending);
pageNumPending = null;
}
});
});
document.getElementById('page_num').textContent = num;
}
function showContent() {
loadingWrapper.style.display = 'none';
canvas.style.display = 'block';
}
function showLoader() {
if(hideLoader) return
loadingWrapper.style.display = 'flex';
canvas.style.display = 'none';
}
function showPaginator() {
if(hidePaginator) return
paginator.style.display = 'block';
}
function queueRenderPage(num) {
if (pageRendering) {
pageNumPending = num;
} else {
renderPage(num);
}
}
function onPrevPage() {
if (pageNum &lt;= 1) {
return;
}
pageNum--;
queueRenderPage(pageNum);
}
document.getElementById('prev').addEventListener('click', onPrevPage);
function onNextPage() {
if (pageNum >= pdfDoc.numPages) {
return;
}
pageNum++;
queueRenderPage(pageNum);
}
document.getElementById('next').addEventListener('click', onNextPage);
pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
pdfDoc = pdfDoc_;
var numPages = pdfDoc.numPages;
document.getElementById('page_count').textContent = numPages;
if(pageNum > numPages) {
pageNum = numPages
}
renderPage(pageNum);
});
}
&lt;/script></description></item><item><title>Serotonin limits generation of chromaffin cells during adrenal organ development</title><link>https://louis.faure.dev/publication/kameneva2022/</link><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/kameneva2022/</guid><description/></item><item><title>Surface flow for colonial integration in reef-building corals</title><link>https://louis.faure.dev/publication/bouderlique2022/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/bouderlique2022/</guid><description/></item><item><title>EMBL-EBI lecture: Introduction to trajectory inference techniques</title><link>https://louis.faure.dev/talk/embl/</link><pubDate>Fri, 04 Mar 2022 10:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/embl/</guid><description>&lt;script type="text/javascript" src= '/js/pdf-js/build/pdf.js'>&lt;/script>
&lt;style>
#the-canvas {
border: 1px solid black;
direction: ltr;
width: 100%;
height: auto;
display: none;
}
#paginator {
display: none;
text-align: center;
margin-bottom: 10px;
}
#loadingWrapper {
display: none;
justify-content: center;
align-items: center;
width: 100%;
height: 350px;
}
#loading {
display: inline-block;
width: 50px;
height: 50px;
border: 3px solid #d2d0d0;;
border-radius: 50%;
border-top-color: #383838;
animation: spin 1s ease-in-out infinite;
-webkit-animation: spin 1s ease-in-out infinite;
}
@keyframes spin {
to { -webkit-transform: rotate(360deg); }
}
@-webkit-keyframes spin {
to { -webkit-transform: rotate(360deg); }
}
&lt;/style>
&lt;div id="paginator">
&lt;button id="prev">Previous&lt;/button>
&lt;button id="next">Next&lt;/button>
&amp;nbsp; &amp;nbsp;
&lt;span>Page: &lt;span id="page_num">&lt;/span> / &lt;span id="page_count">&lt;/span>&lt;/span>
&lt;/div>
&lt;div id="embed-pdf-container">
&lt;div id="loadingWrapper">
&lt;div id="loading">&lt;/div>
&lt;/div>
&lt;canvas id="the-canvas">&lt;/canvas>
&lt;/div>
&lt;script type="text/javascript">
window.onload = function() {
var url = "https:\/\/louis.faure.dev\/" + '.\/talk\/embl\/slides.pdf';
var hidePaginator = "" === "true";
var hideLoader = "" === "true";
var selectedPageNum = parseInt("") || 1;
var pdfjsLib = window['pdfjs-dist/build/pdf'];
pdfjsLib.GlobalWorkerOptions.workerSrc = "https:\/\/louis.faure.dev\/" + '/js/pdf-js/build/pdf.worker.js';
var pdfDoc = null,
pageNum = selectedPageNum,
pageRendering = false,
pageNumPending = null,
scale = 3,
canvas = document.getElementById('the-canvas'),
ctx = canvas.getContext('2d'),
paginator = document.getElementById("paginator"),
loadingWrapper = document.getElementById('loadingWrapper');
showPaginator();
showLoader();
function renderPage(num) {
pageRendering = true;
pdfDoc.getPage(num).then(function(page) {
var viewport = page.getViewport({scale: scale});
canvas.height = viewport.height;
canvas.width = viewport.width;
var renderContext = {
canvasContext: ctx,
viewport: viewport
};
var renderTask = page.render(renderContext);
renderTask.promise.then(function() {
pageRendering = false;
showContent();
if (pageNumPending !== null) {
renderPage(pageNumPending);
pageNumPending = null;
}
});
});
document.getElementById('page_num').textContent = num;
}
function showContent() {
loadingWrapper.style.display = 'none';
canvas.style.display = 'block';
}
function showLoader() {
if(hideLoader) return
loadingWrapper.style.display = 'flex';
canvas.style.display = 'none';
}
function showPaginator() {
if(hidePaginator) return
paginator.style.display = 'block';
}
function queueRenderPage(num) {
if (pageRendering) {
pageNumPending = num;
} else {
renderPage(num);
}
}
function onPrevPage() {
if (pageNum &lt;= 1) {
return;
}
pageNum--;
queueRenderPage(pageNum);
}
document.getElementById('prev').addEventListener('click', onPrevPage);
function onNextPage() {
if (pageNum >= pdfDoc.numPages) {
return;
}
pageNum++;
queueRenderPage(pageNum);
}
document.getElementById('next').addEventListener('click', onNextPage);
pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
pdfDoc = pdfDoc_;
var numPages = pdfDoc.numPages;
document.getElementById('page_count').textContent = numPages;
if(pageNum > numPages) {
pageNum = numPages
}
renderPage(pageNum);
});
}
&lt;/script></description></item><item><title>Single-cell RNA-sequencing analysis of the developing mouse inner ear identifies molecular logic of auditory neuron diversification</title><link>https://louis.faure.dev/publication/petitpre2022/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/petitpre2022/</guid><description/></item><item><title>Two different cell-cycle processes determine the timing of cell division in Escherichia coli</title><link>https://louis.faure.dev/publication/colin2021/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/colin2021/</guid><description/></item><item><title>Single-cell transcriptomics of human embryos identifies multiple sympathoblast lineages with potential implications for neuroblastoma origin</title><link>https://louis.faure.dev/publication/kameneva2021/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/kameneva2021/</guid><description/></item><item><title>Stem cell contributions to cementoblast differentiation in healthy periodontal ligament and periodontitis</title><link>https://louis.faure.dev/publication/zhao2020/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/zhao2020/</guid><description/></item><item><title>Prototypical pacemaker neurons interact with the resident microbiota</title><link>https://louis.faure.dev/publication/klimovich2020/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/klimovich2020/</guid><description/></item><item><title>Seminar: Transcriptional landscape of fate choices in the sensory lineages</title><link>https://louis.faure.dev/talk/bioinfokarolinska/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/talk/bioinfokarolinska/</guid><description/></item><item><title>Robust and Scalable Learning of Complex Intrinsic Dataset Geometry via ElPiGraph</title><link>https://louis.faure.dev/publication/albergante2020/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/albergante2020/</guid><description/></item><item><title>Single cell RNA sequencing identifies early diversity of sensory neurons forming via bi-potential intermediates</title><link>https://louis.faure.dev/publication/faure2020/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/faure2020/</guid><description/></item><item><title>Slides</title><link>https://louis.faure.dev/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/slides/example/</guid><description>&lt;h1 id="welcome-to-slides">Welcome to Slides&lt;/h1>
&lt;p>&lt;a href="https://sourcethemes.com/academic/">Academic&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/hakimel/reveal.js#pdf-export">PDF Export&lt;/a>: &lt;code>E&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>porridge &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blueberry&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> porridge &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blueberry&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Eating...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;pre tabindex="0">&lt;code>{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code>&lt;/pre>&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
**Two**
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>{{% speaker_note %}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Only the speaker can read these notes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Press &lt;span style="color:#e6db74">`S`&lt;/span> key to view
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{% /speaker_note %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/img/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">slide&lt;/span> &lt;span style="color:#a6e22e">background-image&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/img/boards.jpg&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">slide&lt;/span> &lt;span style="color:#a6e22e">background-color&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#0000FF&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">slide&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;my-style&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">reveal&lt;/span> &lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#f92672">h1&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">reveal&lt;/span> &lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">reveal&lt;/span> &lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#f92672">h3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">navy&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://discourse.gohugo.io">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sourcethemes.com/academic/docs/">Documentation&lt;/a>&lt;/p></description></item><item><title>Heterogeneity of spontaneous DNA replication errors in single isogenic Escherichia coli cells</title><link>https://louis.faure.dev/publication/woo2018/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/publication/woo2018/</guid><description/></item><item><title/><link>https://louis.faure.dev/project/dyntrack/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/project/dyntrack/</guid><description/></item><item><title/><link>https://louis.faure.dev/project/scfates/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/project/scfates/</guid><description/></item><item><title/><link>https://louis.faure.dev/project/simpleppt/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://louis.faure.dev/project/simpleppt/</guid><description/></item></channel></rss>